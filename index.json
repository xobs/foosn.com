[{"categories":null,"contents":"This talk looked at Liberty Mutual’s transformation to Continuous Integration, Continuous Delivery, and DevOps. For a large, heavily regulated industry, this task can not only be daunting, but viewed by many as impossible. Often, organizations try to reduce the friction through micro-fixes, but Eddie’s team asked how to change the culture to reduce the friction and concluded with the following final points:\nDon’t mandate DevOps. Give employees the chance to master their discipline with examples to set and follow. Favor deep end-to-end accomplishments over broad but incremental steps forward. Focus on taking the right teams far before encouraging broad adoption. Centralize the platforms and tools that your teams shouldn’t be thinking about. Provide foundational services/commodities and let teams stay on purpose. Incorporate contributions from everyone; don’t stifle autonomy. Stay open to new ways of working. Challenge security policies, but respect intentions. Find new ways to enforce concerns without abandoning precaution. ","permalink":"https://foosn.com/publications/somepublication/","tags":["DevOps","Continuous Integration","Continuous Delivery","CI/CD pipelines","agile","Culture"],"title":"Organically DevOps: Building Quality and Security into the Software Supply Chain at Liberty Mutual"},{"categories":null,"contents":"Farpatch is a wireless debugger, capable of programming, debugging, and interacting with a wide range of microcontrollers. Powered by the BlackMagic debug software, Farpatch supports inspecting memory, single-stepping code, and adding breakpoints to your project. You don’t need to install any drivers, just join Farpatch to your wireless network, or let it run in AP mode if you’re not near an access point.\nFarpatch can also draw power from your board, supports board voltages of 1.8 - 5 V, and will adjust itself accordingly.\n","permalink":"https://foosn.com/products/farpatch/","tags":["open hardware","esp32","crowdfunding"],"title":"Farpatch: Wireless, Remote Debugging"},{"categories":null,"contents":"Fomu is the easiest way to get started with FPGA or RISC-V development Fomu is a programmable FPGA device that fits inside a USB port. It has four buttons, an RGB LED, and an FPGA that is compatible with a fully open source chain and capable of running a RISC-V core. Fomu comes in a custom plastic enclosure that slots perfectly into a USB Type-A port.\nPython, RISC-V, FPGA, All Open Fomu has Python With 128 kilobytes of RAM and a large amount of storage, Fomu is powerful enough to run Python natively. And since it lives in your USB port, installation is super simple. FPGAs are complicated, but the latest Python tools make it easy to use Fomu without any specialized training.\nFomu runs RISC-V Underneath the Python interpreter lies a RISC-V softcore running on the FPGA fabric. RISC-V is an up-and-coming processor architecture that is poised to take over everything from deeply-embedded chips to high-performance computing. Fomu’s RISC-V softcore is a great introduction to the processor architecture of the future.\nFomu is an FPGA An FPGA is a piece of reconfigurable silicon. The default Fomu firmware exposes a USB bootloader running a RISC-V softcore, but you can load whatever you want. Softcores are also available for LM32 and OpenRISC. You can practice adding instructions to the CPU, or add new blocks such as LED blink patterns or better captouch hardware blocks.\nFomu is entirely open Developing with Fomu is incredibly easy: just load code via USB and go. Whether you’re writing RISC-V code, Python code, or HDL, it’s all uploaded to Fomu in the same way. The ICE40UP5K FPGA is supported with a fully open toolchain, meaning you can start development without creating an account, signing an NDA, or downloading a multi-gigabyte installer.\nFomu is for sale Fomu reached the crowdfunding goal in 2019, and is available for purchase on Crowd Supply.\n","permalink":"https://foosn.com/products/fomu/","tags":["open hardware","USB","fpga","crowdfunding"],"title":"Fomu: An FPGA in your USB Port"},{"categories":null,"contents":"Tomu is a programmable computer that fits inside a USB port. It is user-programmable, has two buttons and two LEDs, and can be used for everything from a hobbyist device to a U2F security token. Simple, Open, Flexible, Easy\nTomu is simple. It hides out in a USB port of your computer and waits for you to use it. It has two LEDs to let you know what’s going on, and two buttons for interaction. There’s no fancy setup or complex user interface.\nTomu is open. You can download the hardware schematics, make your own circuit board, and inspect how all the pieces work together. You can download the software source code and trace programs as they run. You can even load your own programs onto Tomu and have it do exactly what you want.\nTomu is flexible. Maybe you want volume buttons on the side of your laptop. You can load software onto Tomu that uses the two buttons for Volume Up and Volume Down. Or maybe you want to be able to put your computer to sleep or wake it up from a USB hub. With Tomu, you can turn any USB port into an input device simply by uploading new software to it.\nTomu is easy. It can be used as something called a Universal 2nd Factor (U2F) token. Many sites support two-factor authentication (2FA) to ensure you’re you, even if your password gets stolen. Two-factor authentication options range from sending you an SMS to requiring you use a one-time-password authenticator. U2F simplifies this process by simply requiring you press a button on a specialized device. With U2F software loaded, Tomu can act as that token.\nTomu is for sale. Tomu reached the crowdfunding goal in 2018, and is available for purchase on Crowd Supply.\n","permalink":"https://foosn.com/products/tomu/","tags":["open hardware","USB","crowdfunding"],"title":"Tomu: A Computer in your USB Port"},{"categories":null,"contents":"Xous is a microkernel operating system designed for medium embedded systems with clear separation of processes. Nearly everything is implemented in userspace, where message passing forms the basic communications primitive. Find out more at xous.dev, or join the project on Github.\n","permalink":"https://foosn.com/software/xous/","tags":["operating systems","risc-v"],"title":"Xous: MMU-enforced Microkernel Operating System"}]